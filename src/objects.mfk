


array screen [1000]@$b400
array score_area[8]@screen.addr+66
array sprite_pointers[8]@$b7f8
array card_sprites[8*64]@$b200
array reverse_card_sprite[64]@$b400
array standard_sprites[8*64]@$b000

const byte reverse_card_sprite_pointer = lo(reverse_card_sprite.addr >> 6)
const byte card_sprite_base_pointer = lo(card_sprites.addr >> 6)
const byte standard_sprite_base_pointer = lo(standard_sprites.addr >> 6)
const byte max_lane = 2 // TODO
const word bike_touch_position = 40 // TODO
const word initial_spawn_position = 330 // TODO
const byte t_bike = 1
const byte t_explosion = 2
const byte t_explosion_last = 5
const pointer bike_sprite = standard_sprites.addr + t_bike * 64

array o_types [8] = [t_bike,0,0,0,0,0,0,0]
array o_flying_y [8] = [0,0,0,0,0,0,0,0]
array o_lane  [8]
array o_position_lo[8]
array o_position_hi[8]
array sprite_to_obj[8]
array obj_to_sprite[8]
sbyte bike_direction
byte bike_progress
const byte bits_per_lane = 5
const byte max_bike_progress = (1 << bits_per_lane) - 1
const byte half_bike_progress = 1 << (bits_per_lane - 1)

sbyte find_empty_slot() {
	byte i
	for i,0,paralleluntil,8 {
		if o_types[i] == 0 {
			return i
		}
	}
	return $ff
}

const byte min_bike_position = 24
const byte max_bike_position = $fc


void apply_bike_direction() {
	bike_progress += bike_direction
	bike_progress &= max_bike_progress
	if bike_progress == 0 {
		if bike_direction > 0 {
			o_lane[0] += 1
		}
		bike_direction = 0
	}
}

void move_objects() {
	byte i
	byte j
	word pos
	byte sprite_id
	byte texture_id
	word dpos
	
	if is_game_over == 0 {
		if input_dy != 0 {
			bike_direction = input_dy
		}
		if o_lane[0] == 0 && bike_progress == 0 && bike_direction < 0 {
			bike_direction = 0
		} else if o_lane[0] == max_lane && bike_direction > 0 {
			bike_direction = 0
		}
		if bike_progress == 0 && bike_direction < 0 {
			o_lane[0] -= 1
		}
		apply_bike_direction()
		o_position_lo[0] += input_dx
		o_position_lo[0] += input_dx
		if o_position_lo[0] < min_bike_position {
			o_position_lo[0] = min_bike_position
		} else if o_position_lo[0] >= max_bike_position {
			o_position_lo[0] = max_bike_position
		}	
	} else {
		if input_btn != 0 {
			restart_game = 1
			return
		}
	}
	
	for i,1,paralleluntil,8 {
		if o_types[i] == 0 { continue }
		if o_flying_y[i] != 0 {
			o_flying_y[i] -= 2
			if o_flying_y[i] < 48 {
				if hand_size == 0 {				
					for j,0,paralleluntil,5 {
						clear_card_on_screen(j)
					}
				}
				if is_game_over == 0 {
					hand[hand_size] = o_types[i]
					draw_card_to_screen(hand_size, hand[hand_size])
					hand_size += 1
					check_and_process_hand()
				}
				destroy_object(i)
			}
		} else {
			pos = o_position_hi[i]:o_position_lo[i]
			pos -= game_speed
			pos.hi &= 1 // in case the bug reappears
			if is_game_over == 0 {
				dpos = pos
				dpos -= o_position_lo[0]
				dpos += 24
				if dpos < 72 {
					if bike_progress & half_bike_progress == 0 && o_lane[i] == o_lane[0] {
						touch_object(i)
					} else if bike_progress & half_bike_progress != 0 && o_lane[i] == o_lane[0] + 1 {
						touch_object(i)
					}
				}
			}
			if pos < game_speed {
				destroy_object(i)
			}
			o_position_hi[i]:o_position_lo[i] = pos
		}
	}	
}

inline void destroy_object(byte i) {
	o_types[i] = 0
	o_flying_y[i] = 0
}

void spawn_object(byte type, byte lane) {
	byte i
	for i,1,paralleluntil,8 {
		if o_types[i] == 0 {
			o_types[i] = type
			o_position_hi[i]:o_position_lo[i] = initial_spawn_position
			o_lane[i] = lane
			o_flying_y[i] = 0
			if type & $80 != 0 {
				draw_card_to_sprite(card_sprite_base_pointer + i, type)
			}
			return
		}
	}
}

inline byte get_y_for_lane(byte lane) {
	return (lane << bits_per_lane) + lane0
}

void touch_object(byte i) {
	if o_types[i] & $80 != 0 && o_flying_y[i] == 0 {
		o_flying_y[i] = get_y_for_lane(o_lane[i])
	}
}

const byte lane0 = 100

void calculate_sprites() {
	const pointer xs = $D000
	const pointer ys = $D001
	byte i
	for i,0,paralleluntil,8 {
		sprite_to_obj[i] = $ff
		obj_to_sprite[i] = $ff
	}
	byte next
	next = 0
	byte l
	for l,max_lane,downto,0 {
		// TODO: until vs downto
		for i,0,until,8 {
			if o_types[i] !=0 && o_lane[i] == l {
				obj_to_sprite[i] = next
				sprite_to_obj[next] = i
				next += 1
			}
		}
	}
	byte s
	byte mask
	mask = 1
	vic_spr_exp_x = 0
	vic_spr_exp_y = 0
	vic_spr_ena = 0
	vic_spr_hi_x = 0
	for s,0,until,8 {
		i = sprite_to_obj[s]
		if i & $80 == 0 && o_types[i] != 0 {
			vic_spr_ena |= mask
			if o_types[i] & $80 != 0 {
				sprite_pointers[s] = i + card_sprite_base_pointer
				vic_spr_color[s] = (o_types[i] & 1) << 1 // 0=black, 2=red TODO: don't use black
			} else {
				sprite_pointers[s] = o_types[i] + standard_sprite_base_pointer
				if is_game_over == 0 {
					vic_spr_color[s] = cyan
				} else {				
					if animation_countdown & 8 == 0 {
						vic_spr_color[s] = yellow
					} else {
						vic_spr_color[s] = red
					}
				}
			}
			if i == 0 {
				xs[s << 1] = o_position_lo[0]
				ys[s << 1] = get_y_for_lane(o_lane[0]) + bike_progress
				vic_spr_exp_y |= mask
				vic_spr_exp_x |= mask
			} else if o_flying_y[i] != 0 {
				xs[s << 1] = o_position_lo[i]
				if o_position_hi[i] & 1 != 0 {
					vic_spr_hi_x |= mask
				}
				if o_flying_y[i] & 16 == 0 {
					vic_spr_exp_y |= mask
					ys[s << 1] = o_flying_y[i]
				} else {
					ys[s << 1] = o_flying_y[i] + 9
				}
				if (o_flying_y[i] + 8) & 16 == 0 {
					sprite_pointers[s] = 8
					vic_spr_color[s] = light_blue // TODO
				}
			} else {
				xs[s << 1] = o_position_lo[i]
				ys[s << 1] = get_y_for_lane(o_lane[i])
				if o_position_hi[i] & 1 != 0 {
					vic_spr_hi_x |= mask
				}
				vic_spr_exp_y |= mask
			}
			//
		}
		mask <<= 1
	}
}
